name: CI Docker and Helm

on:
  push:
    branches:
      - main
      - 'workflow/api-improve'

env:
  IMAGE_NAME_API: amelieloulou/transform-and-deliver-assets-api
  IMAGE_NAME_JOB: amelieloulou/transform-and-deliver-assets-job
  CHART_PATH: ./opensource

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine version
        id: determine-version
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            # Get the latest tag
            LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "1.0.0")
            # Extract the version numbers
            MAJOR=$(echo ${LATEST_TAG} | cut -d. -f1)
            MINOR=$(echo ${LATEST_TAG} | cut -d. -f2)
            PATCH=$(echo ${LATEST_TAG} | cut -d. -f3)
            # Increment the version based on current
            PATCH=$((PATCH+1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "VERSION=${NEW_VERSION}" >> $GITHUB_ENV
            echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          else
            VERSION="0.0.2-development"
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          fi

  build-and-push-docker-api:
    runs-on: ubuntu-latest
    needs: determine-version

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache npm dependencies for API
        uses: actions/cache@v4
        with:
          path: src/api/node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('src/api/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-api-node-modules-

      - name: Install npm dependencies for API
        working-directory: src/api
        run: npm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image API
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 --push -t ${{ env.IMAGE_NAME_API }}:${{ needs.determine-version.outputs.version }} --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max ./src/api

  build-and-push-docker-job:
    runs-on: ubuntu-latest
    needs:
      - determine-version

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image Job
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 --push -t ${{ env.IMAGE_NAME_JOB }}:${{ needs.determine-version.outputs.version }} --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max ./src

  publish-helm-chart:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-docker-api
      - build-and-push-docker-job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.1

      - name: Update Helm chart version
        run: |
          VERSION="${{ needs.determine-version.outputs.version }}"
          sed -i "s/^version: .*/version: ${VERSION}/" ${{ env.CHART_PATH }}/Chart.yaml
          helm package ${{ env.CHART_PATH }}

      - name: Push Helm chart to Docker Hub
        run: |
          helm push $(ls *.tgz) oci://registry-1.docker.io/amelieloulou
