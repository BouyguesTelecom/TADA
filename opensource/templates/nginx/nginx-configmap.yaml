apiVersion: v1
kind: ConfigMap
metadata:
    name: nginx-configmap
data:
    proxy-body-size: 10m
    nginx.conf: |
        events {}

        http {
            log_format json escape=json
            '{'
            '"access_time":"$time_iso8601",'
            '"remote_addr":"$remote_addr",'
            '"method":"$request_method",'
            '"http_version":"HTTP/$http_version",'
            '"user_agent":"$http_user_agent",'
            '"url":"$request_uri",'
            '"referrer":"$http_referer",'
            '"response_code":$status,'
            '"body_byte_send":"$body_bytes_sent",'
            '"duration":"$request_time",'
            '"cache_status":"$upstream_cache_status"'
            '}';

            proxy_cache_path /opt/bitnami/nginx/cache levels=1:2 keys_zone=zone1:10m max_size=1g inactive=24h use_temp_path=off;
            server {
              listen 8080;
              server_name nginx;

              proxy_cache zone1;
              proxy_cache_valid any 1m;
              proxy_cache_methods GET;
              proxy_cache_key "$request_uri";

              types {
                application/pdf pdf;
                image/svg+xml svg svgz;
                image/jpeg jpeg jpg;
                image/png png;
                image/webp webp;
              }

              location = /favicon.ico {
                return 204;
                access_log off;
                log_not_found off;
              }
              location {{ if hasKey .Values.mediaProvider "apiPrefix" }}{{ .Values.mediaProvider.apiPrefix }}/catalog{{ else }}/catalog{{ end }} {
                limit_except GET {
                    deny all;
                }
                add_header X-Cache-Status $upstream_cache_status;
                proxy_pass http://nginx-purge-service;
              }

              location ~ ^{{ if hasKey .Values.mediaProvider "apiPrefix" }}{{ .Values.mediaProvider.apiPrefix }}{{ .Values.mediaProvider.routes.files.get }}{{ else }}{{ .Values.mediaProvider.routes.files.get }}{{ end }} {
                limit_except GET {
                    deny all;
                }
                add_header X-Cache-Status $upstream_cache_status;
                proxy_pass http://nginx-purge-service;
              }
                location ~ /purge(/.*) {
                   limit_except GET {
                       deny all;
                   }
                   proxy_cache_valid 200 302 0s;
                   proxy_no_cache 1;
                   proxy_cache_bypass 1;
                   proxy_pass http://nginx-purge-service;
                }
              location / {
                return 200;
              }

              access_log /dev/stdout json;
              }
            }
