apiVersion: apps/v1
kind: Deployment
metadata:
    name: tada-{{ .Release.Name }}-media
    labels:
        app: tada-{{ .Release.Name }}-media
spec:
    replicas: {{ .Values.mediaApi.hpa.replicaCountMin }}
    selector:
        matchLabels:
            app: tada-{{ .Release.Name }}-media
    template:
        metadata:
            labels:
                app: tada-{{ .Release.Name }}-media
        spec:
            containers:
                -   name: tada-{{ .Release.Name }}-media-api
                    image: "{{ .Values.mediaApi.imageName }}:{{ .Values.mediaApi.imageVersion }}"
                    resources:
                        requests:
                            cpu: {{ .Values.mediaApi.resources.requests.cpu }}
                            memory: {{ .Values.mediaApi.resources.requests.memory }}
                        limits:
                            cpu: {{ .Values.mediaApi.resources.limits.cpu }}
                            memory: {{ .Values.mediaApi.resources.limits.memory }}
                    ports:
                        -   containerPort: 3001
                    volumeMounts:
                        -   name: redis-storage
                            mountPath: "{{ default "/dumps" .Values.redis.dumpFolderPath }}"
                    env:
                        -   name: CATALOG_ROUTE
                            value: "{{ default "/catalog" .Values.mediaApi.routes.catalog.get }}"
                        -   name: PAYLOAD_MAX_SIZE
                            value: "{{ default "10mb" .Values.mediaApi.payloadMaxSize }}"
                        -   name: HEALTHCHECK_ROUTE
                            value: "{{ default "/readiness-check" .Values.mediaApi.routes.healthcheck.get }}"
                        -   name: ORIGINS_ALLOWED
                            value: |
                                    {{ .Values.mediaApi.originsAllowed | default "localhost,*" }}
                        -   name: REQUEST_TIMEOUT
                            value: "{{ default 310000 .Values.mediaApi.requestTimeout }}"
                        -   name: METHODS_ALLOWED
                            value: "{{ default "GET,POST" .Values.mediaApi.methodsAllowed }}"
                        -   name: DUMP_FOLDER_PATH
                            value: "{{ default "/dumps" .Values.redis.dumpFolderPath }}"
                        -   name: NGINX_SERVICE
                            value: "{{ include "nginxService" . }}"
                        -   name: NGINX_INGRESS
                            value: '{{.Values.protocol}}://{{.Values.env}}.{{.Values.domain}}'
                        -   name: IMAGE_SERVICE
                            value: "{{ include "mediaService" . }}"
                        -   name: API_PREFIX
                            value: "{{ default "" .Values.mediaApi.apiPrefix }}"
                        -   name: USE_STRIPMETADATA
                            value: "{{ default "" .Values.mediaApi.useStripMetadata }}"
                        -   name: DELEGATED_STORAGE_SINGLE_PATH
                            value: "{{ default "" .Values.delegatedStorage.path.single }}"
                        -   name: DELEGATED_STORAGE_MULTI_PATH
                            value: "{{ default "" .Values.delegatedStorage.path.multi }}"
                        -   name: DELEGATED_STORAGE_RATE_LIMIT
                            value: "{{ default "5" .Values.delegatedStorage.rateLimit }}"
                        -   name: DELEGATED_STORAGE_RATE_LIMIT_WINDOW
                            value: "{{ default "30000" .Values.delegatedStorage.rateLimitWindow }}"
                        -   name: NAMESPACES
                            value: "{{ default "DEV" .Values.NAMESPACES_ALLOWED }}"
                        -   name: VALID_MIMETYPES
                            value: "image/png,image/jpeg,application/pdf,image/jpg,image/webp,image/svg+xml"
                        {{- if .Values.dev}}
                        -   name: DEV_ENV
                            value: "true"
                        {{- end}}
                        -   name: REDIS_SERVICE
                            value: "{{ include "redisService" . }}"
                        -   name: DELEGATED_STORAGE_METHOD
                            value: "{{ default "DISTANT_BACKEND" .Values.delegatedStorage.storageMethod }}"
                        -   name: DELEGATED_STORAGE_HOST
                            value: "{{ if eq .Values.delegatedStorage.storageMethod "S3" }}http://{{ include "minioService" . }}:{{ .Values.s3.port }}{{ else }}{{ .Values.delegatedStorage.host }}{{ end }}"
                        -   name: DELEGATED_STORAGE_READINESS_CHECK
                            value: "{{ default "/minio/health/live" .Values.delegatedStorage.routes.readinessCheck }}"
                        {{- if and (eq .Values.delegatedStorage.connect true) (eq .Values.delegatedStorage.storageMethod "DISTANT_BACKEND") }}
                        -   name: DELEGATED_STORAGE_TOKEN
                            value: "{{ default "NinjaDesIles" .Values.delegatedStorage.accessToken }}"
                        {{- end }}
                        {{- if and (eq .Values.delegatedStorage.connect true) (eq .Values.delegatedStorage.storageMethod "S3") }}
                        -   name: S3_ENDPOINT
                            value: {{ include "minioService" . }}
                        -   name: S3_PORT
                            value: "{{ default "9000" .Values.s3.port }}"
                        -   name: S3_ACCESS_KEY
                            value: "{{ default "minioadmin" .Values.s3.accessKey }}"
                        -   name: S3_SECRET_KEY
                            value: "{{ default "minioadmin" .Values.s3.secretKey }}"
                        -   name: S3_BUCKET_NAME
                            value: "{{ default "media" .Values.s3.bucketName }}"
                        {{- end }}
                        -   name: MEDIA_TOKEN
                            value: "{{ .Values.mediaApi.mediaToken }}"
                        -   name: URL_TO_POST_BACKUP
                            value: "{{ .Values.mediaApi.routes.post_backup.post }}"
                        - name: NODE_ENV
                          value: 'production'
            volumes:
                -   name: redis-storage
                    persistentVolumeClaim:
                        claimName: tada-{{ .Release.Name }}-redis-pv