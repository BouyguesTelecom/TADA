{{- if and .Values.local (eq .Values.delegatedStorage.storageMethod "S3") }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-minio-deployment
  labels:
    app: {{ .Release.Name }}-minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-minio
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-minio
    spec:
      containers:
        - name: {{ .Release.Name }}-minio
          image: minio/minio
          ports:
            - containerPort: 9000
            - containerPort: 8900
          env:
            - name: MINIO_ROOT_USER
              value: "minioadmin"
            - name: MINIO_ROOT_PASSWORD
              value: "minioadmin"
          command: ["minio"]
          args: ["server", "/data/minio", "--console-address", ":8900"]
          volumeMounts:
            - name: minio-storage
              mountPath: "/data/minio"
      volumes:
        - name: minio-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-minio-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-minio
spec:
  type: NodePort
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: api
    - port: 8900
      targetPort: 8900
      protocol: TCP
      name: console
  selector:
    app: {{ .Release.Name }}-minio

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-minio-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  ingressClassName: nginx
  rules:
    - host: minio.media
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ .Release.Name }}-minio
                port:
                  name: console
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-local-pv-minio
  labels:
    type:  {{ .Release.Name }}-minio
spec:
  capacity:
    storage: 5G
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Delete
  storageClassName: hostpath
  local:
    path: "/tmp"
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - docker-desktop
                - orbstack
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-minio-pv-claim
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: "{{.Values.mediaProvider.storage.resources.requests.storage}}"
  storageClassName: "{{.Values.mediaProvider.storage.storageClassName}}"
  selector:
    matchLabels:
      type:  {{ .Release.Name }}-minio
{{- end }}